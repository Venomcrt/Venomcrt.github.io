<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 6.2.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">


<link rel="stylesheet" href="/lib/font-awesome/css/all.min.css">

<script id="hexo-configurations">
    var NexT = window.NexT || {};
    var CONFIG = {"hostname":"venomcrt.github.io","root":"/","scheme":"Pisces","version":"7.8.0","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"copycode":{"enable":false,"show_result":false,"style":null},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"algolia":{"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"localsearch":{"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}}};
  </script>

  <meta name="description" content="12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210">
<meta property="og:type" content="article">
<meta property="og:title" content="Algorithm--哈夫曼编码(最小堆)">
<meta property="og:url" content="https://venomcrt.github.io/2022/09/02/Algorithm_14">
<meta property="og:site_name" content="渗透压的博客">
<meta property="og:description" content="12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210">
<meta property="og:locale" content="zh_CN">
<meta property="article:published_time" content="2022-09-02T13:42:58.000Z">
<meta property="article:modified_time" content="2022-10-01T08:48:53.092Z">
<meta property="article:author" content="渗透压">
<meta property="article:tag" content="Algorithm">
<meta property="article:tag" content="C++">
<meta name="twitter:card" content="summary">

<link rel="canonical" href="https://venomcrt.github.io/2022/09/02/Algorithm_14">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome : false,
    isPost : true,
    lang   : 'zh-CN'
  };
</script>

  <title>Algorithm--哈夫曼编码(最小堆) | 渗透压的博客</title>
  






  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <span class="logo-line-before"><i></i></span>
      <h1 class="site-title">渗透压的博客</h1>
      <span class="logo-line-after"><i></i></span>
    </a>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
    </div>
  </div>
</div>




<nav class="site-nav">
  <ul id="menu" class="main-menu menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a>

  </li>
        <li class="menu-item menu-item-about">

    <a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>关于</a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>分类</a>

  </li>
  </ul>
</nav>




</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content post posts-expand">
            

    
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="https://venomcrt.github.io/2022/09/02/Algorithm_14">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="渗透压">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="渗透压的博客">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          Algorithm--哈夫曼编码(最小堆)
        </h1>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-calendar"></i>
              </span>
              <span class="post-meta-item-text">发表于</span>

              <time title="创建时间：2022-09-02 21:42:58" itemprop="dateCreated datePublished" datetime="2022-09-02T21:42:58+08:00">2022-09-02</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="far fa-calendar-check"></i>
                </span>
                <span class="post-meta-item-text">更新于</span>
                <time title="修改时间：2022-10-01 16:48:53" itemprop="dateModified" datetime="2022-10-01T16:48:53+08:00">2022-10-01</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-folder"></i>
              </span>
              <span class="post-meta-item-text">分类于</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%E5%AD%A6%E4%B9%A0-Code/" itemprop="url" rel="index"><span itemprop="name">学习--Code</span></a>
                </span>
            </span>

          

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
        <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef struct TreeNode* HuffmanTree;</span><br><span class="line">typedef struct TreeNode &#123;</span><br><span class="line">	char ch;  //要编码的字符 </span><br><span class="line">	int Weight;  //权值</span><br><span class="line">	HuffmanTree Left;</span><br><span class="line">	HuffmanTree Right;</span><br><span class="line">&#125;HuffmanNode;</span><br><span class="line"></span><br><span class="line">#define MinData -1  //随着堆元素的具体值而改变 </span><br><span class="line"></span><br><span class="line">typedef struct HeapStruct* MinHeap;</span><br><span class="line">struct HeapStruct &#123;</span><br><span class="line">	HuffmanTree* data;  //存储堆元素的数组  存储时从下标1开始 </span><br><span class="line">	int Size;  //堆的当前元素的个数</span><br><span class="line">	int Capacity;  //堆的最大容量 </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">HuffmanTree NewHuffmanNode();</span><br><span class="line">MinHeap CreateMinHeap(int MaxSize);</span><br><span class="line">bool Insert(MinHeap H, HuffmanTree item);</span><br><span class="line">HuffmanTree DeleteMin(MinHeap H);</span><br><span class="line">MinHeap BuildMinHeap(MinHeap H);</span><br><span class="line">HuffmanTree Huffman(MinHeap H);</span><br><span class="line">void PreOrderTraversal(HuffmanTree BST);</span><br><span class="line">void HuffmanCode(HuffmanTree BST, int depth);</span><br><span class="line">void HuffmanDecode(char ch[], HuffmanTree BST);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int i, N;</span><br><span class="line">	MinHeap h;</span><br><span class="line">	HuffmanTree T, BT = NULL;</span><br><span class="line"></span><br><span class="line">	cout&lt;&lt;&quot;请输入叶子结点的个数:&quot;&lt;&lt;endl;</span><br><span class="line">	cin&gt;&gt;N;</span><br><span class="line">	h = CreateMinHeap(2 * N);  //创建最小堆   //N个叶子节点最终形成的哈夫曼树最多有2N-1个树结点 </span><br><span class="line">	for (i = 1; i &lt;= N; i++) &#123;/*最小堆元素赋值*/</span><br><span class="line">		printf_s(&quot;请输入第%d叶子结点对应的权值:&quot;,i);</span><br><span class="line">		T = NewHuffmanNode();</span><br><span class="line">		cin&gt;&gt; T-&gt;Weight;</span><br><span class="line">		//scanf(&quot;%d-%c&quot;,&amp;(T-&gt;Weight),&amp;(T-&gt;ch));</span><br><span class="line">		h-&gt;data[++(h-&gt;Size)] = T;</span><br><span class="line">	&#125;</span><br><span class="line">	char string[100];</span><br><span class="line">	printf_s(&quot;请连续输入这%d个叶子结点各自代表的字符:\n&quot;, N);</span><br><span class="line">	getchar();  //吸收上面的换行符 </span><br><span class="line">	gets_s(string);</span><br><span class="line">	for (i = 1; i &lt;= h-&gt;Size; i++) &#123;/*最小堆元素赋值*/</span><br><span class="line">		h-&gt;data[i]-&gt;ch = string[i - 1];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	BT = Huffman(h);  //构造哈夫曼树 </span><br><span class="line">	printf_s(&quot;先序遍历此哈夫曼树的权值:\n&quot;);</span><br><span class="line">	PreOrderTraversal(BT);  //先序遍历此哈夫曼树 </span><br><span class="line">	printf_s(&quot;\n&quot;);</span><br><span class="line">	HuffmanCode(BT, 0);</span><br><span class="line">	printf_s(&quot;要解码吗？请输入二进制编码序列：\n&quot;);</span><br><span class="line">	char ch[100];</span><br><span class="line">	gets_s(ch);</span><br><span class="line">	printf_s(&quot;解码结果为：\n&quot;);</span><br><span class="line">	HuffmanDecode(ch, BT);</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*哈夫曼树构造算法*/</span><br><span class="line">HuffmanTree Huffman(MinHeap H)</span><br><span class="line">&#123;/*假设H-&gt;Size个权值已经存在H-&gt;data[]-&gt;Weight里*/</span><br><span class="line">	int i, num;</span><br><span class="line">	HuffmanTree T;</span><br><span class="line"></span><br><span class="line">	BuildMinHeap(H);  //将H-&gt;data[]按权值调整为最小堆</span><br><span class="line">	/*此处必须将H-&gt;Size的值交给num,因为后面做DeleteMin()和 Insert()函数会改变H-&gt;Size的值*/</span><br><span class="line">	num = H-&gt;Size;</span><br><span class="line">	for (i = 1; i &lt; num; i++) &#123;  //做 H-&gt;Size-1次合并   //此处教科书有问题！</span><br><span class="line">		T = NewHuffmanNode();  //建立一个新的根结点 </span><br><span class="line">		T-&gt;Left = DeleteMin(H);  //从最小堆中删除一个节点，作为新T的左子结点</span><br><span class="line">		T-&gt;Right = DeleteMin(H);  //从最小堆中删除一个节点，作为新T的右子结点 </span><br><span class="line">		T-&gt;Weight = T-&gt;Left-&gt;Weight + T-&gt;Right-&gt;Weight;  //计算新权值 </span><br><span class="line">		//		printf(&quot;%3d 0x%x 0x%x\n&quot;,T-&gt;Weight,T-&gt;Left,T-&gt;Right);</span><br><span class="line">		Insert(H, T);  //将新T插入到最小堆 </span><br><span class="line">	&#125;</span><br><span class="line">	T = DeleteMin(H);</span><br><span class="line"></span><br><span class="line">	return T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/************递归进行哈夫曼编码*************/</span><br><span class="line">void HuffmanCode(HuffmanTree BST, int depth)  //depth为目前编码到哈夫曼树的深度（层次） </span><br><span class="line">&#123;</span><br><span class="line">	static int code[10];  //编码空间 </span><br><span class="line"></span><br><span class="line">	if (BST) &#123;</span><br><span class="line">		if ((BST-&gt;Left == NULL) &amp;&amp; (BST-&gt;Right == NULL)) &#123;  //找到了叶结点</span><br><span class="line">			printf(&quot;字符%c对应权值为%d的哈夫曼编码为：&quot;, BST-&gt;ch, BST-&gt;Weight);</span><br><span class="line">			for (int i = 0; i &lt; depth; i++) &#123;</span><br><span class="line">				printf(&quot;%d&quot;, code[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			printf(&quot;\n&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			code[depth] = 0;  //往左子树方向编码为0 </span><br><span class="line">			HuffmanCode(BST-&gt;Left, depth + 1);</span><br><span class="line">			code[depth] = 1;  //往右子树方向编码为1 </span><br><span class="line">			HuffmanCode(BST-&gt;Right, depth + 1);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*******************哈夫曼解码*********************/</span><br><span class="line">void HuffmanDecode(char ch[], HuffmanTree BST)  //ch[] 要解码的序列</span><br><span class="line">&#123;</span><br><span class="line">	int cnt;</span><br><span class="line">	int num[100];</span><br><span class="line">	HuffmanTree temp;</span><br><span class="line"></span><br><span class="line">	for (int i = 0; i &lt; strlen(ch); i++) &#123;</span><br><span class="line">		if (ch[i] == &#x27;0&#x27;) &#123;</span><br><span class="line">			num[i] = 0;</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			num[i] = 1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	if (BST) &#123;</span><br><span class="line">		cnt = 0;  //计数已经解码0101串的长度 </span><br><span class="line">		while (cnt &lt; strlen(ch)) &#123;</span><br><span class="line">			temp = BST;</span><br><span class="line">			while ((temp-&gt;Left != NULL) &amp;&amp; (temp-&gt;Right != NULL)) &#123;</span><br><span class="line">				if (num[cnt] == 0) &#123;</span><br><span class="line">					temp = temp-&gt;Left;</span><br><span class="line">				&#125;</span><br><span class="line">				else &#123;</span><br><span class="line">					temp = temp-&gt;Right;</span><br><span class="line">				&#125;</span><br><span class="line">				cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			printf(&quot;%c&quot;, temp-&gt;ch);  //输出解码后对应结点的字符 </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*****先序遍历*****/</span><br><span class="line">void PreOrderTraversal(HuffmanTree BST)</span><br><span class="line">&#123;</span><br><span class="line">	if (BST) &#123;</span><br><span class="line">		printf(&quot;%d &quot;, BST-&gt;Weight);     //先访问根节点 </span><br><span class="line">		PreOrderTraversal(BST-&gt;Left);  //再访问左子树 </span><br><span class="line">		PreOrderTraversal(BST-&gt;Right); //最后访问右子树 </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HuffmanTree NewHuffmanNode()</span><br><span class="line">&#123;</span><br><span class="line">	HuffmanTree BST = (HuffmanTree)malloc(sizeof(HuffmanNode));</span><br><span class="line">	BST-&gt;Weight = 0;</span><br><span class="line">	BST-&gt;Left = BST-&gt;Right = NULL;</span><br><span class="line"></span><br><span class="line">	return BST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MinHeap CreateMinHeap(int MaxSize)</span><br><span class="line">&#123;  /*创建容量为MaxSize的最小堆*/</span><br><span class="line">	MinHeap H = (MinHeap)malloc(sizeof(struct HeapStruct));</span><br><span class="line">	H-&gt;data = (HuffmanTree*)malloc((MaxSize + 1) * sizeof(HuffmanTree));</span><br><span class="line">	H-&gt;Size = 0;</span><br><span class="line">	H-&gt;Capacity = MaxSize;</span><br><span class="line">	HuffmanTree T = NewHuffmanNode();</span><br><span class="line">	T-&gt;ch = &#x27;\0&#x27;;  //空字符 </span><br><span class="line">	T-&gt;Weight = MinData;  /*定义哨兵-为小于堆中所有可能元素权值的值，便于以后更快操作*/</span><br><span class="line">	H-&gt;data[0] = T;</span><br><span class="line"></span><br><span class="line">	return H;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool  IsFull(MinHeap H)</span><br><span class="line">&#123;</span><br><span class="line">	return (H-&gt;Size == H-&gt;Capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsEmpty(MinHeap H)</span><br><span class="line">&#123;</span><br><span class="line">	return (H-&gt;Size == 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*插入算法-将新增结点插入到从其父结点到根结点的有序序列中*/</span><br><span class="line">bool Insert(MinHeap H, HuffmanTree item)</span><br><span class="line">&#123;/*将元素item插入到最小堆H中，其中H-&gt;data[0]已被定义为哨兵*/</span><br><span class="line">	int i;</span><br><span class="line">	if (IsFull(H)) &#123;</span><br><span class="line">		printf(&quot;最小堆已满\n&quot;);</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line">	i = ++H-&gt;Size;  //i指向插入后堆中的最后一个元素的位置</span><br><span class="line">	for (; H-&gt;data[i / 2]-&gt;Weight &gt; item-&gt;Weight; i /= 2)  //无哨兵，则增加判决条件 i&gt;1 </span><br><span class="line">		H-&gt;data[i] = H-&gt;data[i / 2];  //向下过滤结点 </span><br><span class="line">	H-&gt;data[i] = item;   //将item插入 </span><br><span class="line"></span><br><span class="line">	return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HuffmanTree DeleteMin(MinHeap H)</span><br><span class="line">&#123;/*从最小堆H中取出权值为最小的元素，并删除一个结点*/</span><br><span class="line">	int parent, child;</span><br><span class="line">	HuffmanTree MinItem, temp = NULL;</span><br><span class="line">	if (IsEmpty(H)) &#123;</span><br><span class="line">		printf(&quot;最小堆为空\n&quot;);</span><br><span class="line">		return NULL;</span><br><span class="line">	&#125;</span><br><span class="line">	MinItem = H-&gt;data[1];  //取出根结点-最小的元素-记录下来</span><br><span class="line">	/*用最小堆中的最后一个元素从根结点开始向上过滤下层结点*/</span><br><span class="line">	temp = H-&gt;data[H-&gt;Size--];  //最小堆中最后一个元素，暂时将其视为放在了根结点</span><br><span class="line">	for (parent = 1; parent * 2 &lt;= H-&gt;Size; parent = child) &#123;</span><br><span class="line">		child = parent * 2;</span><br><span class="line">		if ((child != H-&gt;Size) &amp;&amp; (H-&gt;data[child]-&gt;Weight &gt; H-&gt;data[child + 1]-&gt;Weight)) &#123;/*有右儿子，并且左儿子权值大于右儿子*/</span><br><span class="line">			child++; //child指向左右儿子中较小者 </span><br><span class="line">		&#125;</span><br><span class="line">		if (temp-&gt;Weight &gt; H-&gt;data[child]-&gt;Weight) &#123;</span><br><span class="line">			H-&gt;data[parent] = H-&gt;data[child];  //向上过滤结点-temp存放位置下移到child位置 </span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			break;  //找到了合适的位置</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	H-&gt;data[parent] = temp;  //temp存放到此处</span><br><span class="line"></span><br><span class="line">	return MinItem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MinHeap BuildMinHeap(MinHeap H)</span><br><span class="line">&#123;/*这里假设所有的H-&gt;Size个元素已经存在H-&gt;data[]中*/</span><br><span class="line"> /*本函数将H-&gt;data[]中的元素调整，使其满足堆的有序性*/</span><br><span class="line">	int i, parent, child;</span><br><span class="line">	HuffmanTree temp;</span><br><span class="line">	for (i = H-&gt;Size / 2; i &gt; 0; i--) &#123;  //从最后一个父结点开始，直到根结点 </span><br><span class="line">		temp = H-&gt;data[i];</span><br><span class="line">		for (parent = i; parent * 2 &lt;= H-&gt;Size; parent = child) &#123;</span><br><span class="line">			/*向下过滤*/</span><br><span class="line">			child = parent * 2;</span><br><span class="line">			if ((child != H-&gt;Size) &amp;&amp; (H-&gt;data[child]-&gt;Weight &gt; H-&gt;data[child + 1]-&gt;Weight)) &#123;/*有右儿子，并且左儿子权值大于右儿子*/</span><br><span class="line">				child++; //child指向左右儿子中较小者 </span><br><span class="line">			&#125;</span><br><span class="line">			if (temp-&gt;Weight &gt; H-&gt;data[child]-&gt;Weight) &#123;</span><br><span class="line">				H-&gt;data[parent] = H-&gt;data[child];  //向上过滤结点-temp存放位置下移到child位置 </span><br><span class="line">			&#125;</span><br><span class="line">			else &#123;</span><br><span class="line">				break;  //找到了合适的位置 </span><br><span class="line">			&#125;</span><br><span class="line">		&#125;/*结束内部for循环对以H-&gt;data[i]为根的子树的调整*/</span><br><span class="line"></span><br><span class="line">		H-&gt;data[parent] = temp;  //temp（原H-&gt;data[i]）存放到此处  </span><br><span class="line">	&#125;</span><br><span class="line">	return H;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>

    
    
    

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/Algorithm/" rel="tag"># Algorithm</a>
              <a href="/tags/C/" rel="tag"># C++</a>
          </div>

        


        
    <div class="post-nav">
      <div class="post-nav-item">
    <a href="/2022/09/02/Algorithm_4" rel="prev" title="Algorithm--快速排序">
      <i class="fa fa-chevron-left"></i> Algorithm--快速排序
    </a></div>
      <div class="post-nav-item">
    <a href="/2022/09/02/Algorithm_2" rel="next" title="Algorithm--二分搜索">
      Algorithm--二分搜索 <i class="fa fa-chevron-right"></i>
    </a></div>
    </div>
      </footer>
    
  </article>
  
  
  



          </div>
          

<script>
  window.addEventListener('tabs:register', () => {
    let { activeClass } = CONFIG.comments;
    if (CONFIG.comments.storage) {
      activeClass = localStorage.getItem('comments_active') || activeClass;
    }
    if (activeClass) {
      let activeTab = document.querySelector(`a[href="#comment-${activeClass}"]`);
      if (activeTab) {
        activeTab.click();
      }
    }
  });
  if (CONFIG.comments.storage) {
    window.addEventListener('tabs:click', event => {
      if (!event.target.matches('.tabs-comment .tab-content .tab-pane')) return;
      let commentClass = event.target.classList[1];
      localStorage.setItem('comments_active', commentClass);
    });
  }
</script>

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">渗透压</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives">
          <span class="site-state-item-count">16</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">1</span>
        <span class="site-state-item-name">分类</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
        <span class="site-state-item-count">3</span>
        <span class="site-state-item-name">标签</span></a>
      </div>
  </nav>
</div>



      </div>

    </div>
  </aside>
  <div id="sidebar-dimmer"></div>


      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2022</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">渗透压</span>
</div>

        








      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/pisces.js"></script>


<script src="/js/next-boot.js"></script>




  















  

  

</body>
</html>
