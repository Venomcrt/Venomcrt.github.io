<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 6.2.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">


<link rel="stylesheet" href="/lib/font-awesome/css/all.min.css">

<script id="hexo-configurations">
    var NexT = window.NexT || {};
    var CONFIG = {"hostname":"venomcrt.github.io","root":"/","scheme":"Pisces","version":"7.8.0","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"copycode":{"enable":false,"show_result":false,"style":null},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"algolia":{"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"localsearch":{"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}}};
  </script>

  <meta name="description" content="12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210">
<meta property="og:type" content="article">
<meta property="og:title" content="Algorithm--Kruskal">
<meta property="og:url" content="https://venomcrt.github.io/2022/09/02/Algorithm_11">
<meta property="og:site_name" content="渗透压的博客">
<meta property="og:description" content="12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210">
<meta property="og:locale" content="zh_CN">
<meta property="article:published_time" content="2022-09-02T13:42:58.000Z">
<meta property="article:modified_time" content="2022-10-01T08:45:59.908Z">
<meta property="article:author" content="渗透压">
<meta property="article:tag" content="Algorithm">
<meta property="article:tag" content="C++">
<meta name="twitter:card" content="summary">

<link rel="canonical" href="https://venomcrt.github.io/2022/09/02/Algorithm_11">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome : false,
    isPost : true,
    lang   : 'zh-CN'
  };
</script>

  <title>Algorithm--Kruskal | 渗透压的博客</title>
  






  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <span class="logo-line-before"><i></i></span>
      <h1 class="site-title">渗透压的博客</h1>
      <span class="logo-line-after"><i></i></span>
    </a>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
    </div>
  </div>
</div>




<nav class="site-nav">
  <ul id="menu" class="main-menu menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a>

  </li>
        <li class="menu-item menu-item-about">

    <a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>关于</a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>分类</a>

  </li>
  </ul>
</nav>




</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content post posts-expand">
            

    
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="https://venomcrt.github.io/2022/09/02/Algorithm_11">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="渗透压">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="渗透压的博客">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          Algorithm--Kruskal
        </h1>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-calendar"></i>
              </span>
              <span class="post-meta-item-text">发表于</span>

              <time title="创建时间：2022-09-02 21:42:58" itemprop="dateCreated datePublished" datetime="2022-09-02T21:42:58+08:00">2022-09-02</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="far fa-calendar-check"></i>
                </span>
                <span class="post-meta-item-text">更新于</span>
                <time title="修改时间：2022-10-01 16:45:59" itemprop="dateModified" datetime="2022-10-01T16:45:59+08:00">2022-10-01</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-folder"></i>
              </span>
              <span class="post-meta-item-text">分类于</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%E5%AD%A6%E4%B9%A0-Code/" itemprop="url" rel="index"><span itemprop="name">学习--Code</span></a>
                </span>
            </span>

          

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
        <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line"></span><br><span class="line">using  namespace std;</span><br><span class="line">#define inf 330</span><br><span class="line">#define max 50</span><br><span class="line"></span><br><span class="line">typedef struct  node &#123;</span><br><span class="line">	int no;</span><br><span class="line">&#125;bnode;//顶点结构体 </span><br><span class="line"></span><br><span class="line">typedef struct graph &#123;</span><br><span class="line">	int a[max][max];</span><br><span class="line">	int e, n;</span><br><span class="line">	bnode nu[max];</span><br><span class="line">&#125;G;//邻接矩阵结构体 </span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">	int u;</span><br><span class="line">	int v;</span><br><span class="line">	int w;</span><br><span class="line">&#125;edge;//存储每条边的两个端点以及边值。 </span><br><span class="line"></span><br><span class="line">//创建邻接矩阵 </span><br><span class="line">void create(G&amp; g, int b[max][max], int n, int e)</span><br><span class="line">&#123;</span><br><span class="line">	int i, j;</span><br><span class="line">	g.e = e;//边数 </span><br><span class="line">	g.n = n;//顶点数 </span><br><span class="line">	for (i = 0; i &lt; n; i++)</span><br><span class="line">		for (j = 0; j &lt; n; j++)</span><br><span class="line">			g.a[i][j] = b[i][j];</span><br><span class="line">	for (int i = 0; i &lt; n; i++)</span><br><span class="line">		g.nu[i].no = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void show(G g)</span><br><span class="line">&#123;</span><br><span class="line">	int i, j;</span><br><span class="line">	cout&lt;&lt;&quot;创建的邻接矩阵:&quot;&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">	for (i = 0; i &lt; g.n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;endl;</span><br><span class="line">		for (j = 0; j &lt; g.n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			if (g.a[i][j] == inf)</span><br><span class="line">				cout&lt;&lt;setw(6)&lt;&lt;&quot;∞&quot;;</span><br><span class="line">			else</span><br><span class="line">				cout&lt;&lt; setw(6)&lt;&lt; g.a[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;endl&lt;&lt;g.n&lt;&lt;&quot; 个顶点，&quot;&lt;&lt;g.e&lt;&lt;&quot;条边 &quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//直接插入排序 </span><br><span class="line">void insertfun(edge* a, int length)</span><br><span class="line">&#123;</span><br><span class="line">	int i, j;</span><br><span class="line">	edge temp;</span><br><span class="line"></span><br><span class="line">	for (i = 1; i &lt; length; i++) //这里从数组1开始 </span><br><span class="line">	&#123;</span><br><span class="line">		//每i趟比较,i-1个前面的数的大小都是排好序的。</span><br><span class="line"></span><br><span class="line">		temp = a[i]; //将要比较的数放在temp中 </span><br><span class="line">		for (j = i - 1; j &gt;= 0; j--) //将temp之前的数循环与temp比较，注意，这里是与前面的数进行比较 </span><br><span class="line">		&#123;</span><br><span class="line">			if (temp.w &lt; a[j].w)  // 若前面的数比temp大,交换位置 </span><br><span class="line">			&#123;</span><br><span class="line">				a[j + 1] = a[j]; //整体交换 </span><br><span class="line">			&#125;</span><br><span class="line">			else &#123;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		//此时的j = i-1-1 </span><br><span class="line">		a[j + 1] = temp; //最后将temp的值放入 j+1 </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//克鲁斯卡尔算法</span><br><span class="line">void kruskal(G g)</span><br><span class="line">&#123;</span><br><span class="line">	int visite[max];</span><br><span class="line">	edge e[max];</span><br><span class="line">	int k = 0;</span><br><span class="line">	int u1, v1, s1, s2;</span><br><span class="line"></span><br><span class="line">	//初始化 </span><br><span class="line">	for (int i = 0; i &lt; g.n; i++)</span><br><span class="line">		for (int j = 0; j &lt; i; j++)  //因为矩阵是对称。 </span><br><span class="line">		&#123;</span><br><span class="line">			if (g.a[i][j] != 0 &amp;&amp; g.a[i][j] != inf)</span><br><span class="line">			&#123;</span><br><span class="line">				e[k].u = i;</span><br><span class="line">				e[k].v = j;</span><br><span class="line">				e[k].w = g.a[i][j];</span><br><span class="line">				k++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	//对边进行排序 </span><br><span class="line">	insertfun(e, g.e);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; &quot;排序结果:&quot; &lt;&lt; endl;</span><br><span class="line">	for (int i = 0; i &lt; k; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;&quot;(&quot;&lt;&lt;e[i].u&lt;&lt;&quot;,&quot;&lt;&lt; e[i].v&lt;&lt;&quot;):&quot;&lt;&lt;e[i].w&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	//初始化连通编号 </span><br><span class="line">	for (int i = 0; i &lt; g.n; i++)</span><br><span class="line">		visite[i] = i;</span><br><span class="line"></span><br><span class="line">	cout&lt;&lt;endl&lt;&lt;&quot;克鲁斯卡尔求解结果：&quot;&lt;&lt;endl;</span><br><span class="line">	k = 1; //k为构造过程中的第k条边，初始化为第一条边开始</span><br><span class="line">	int j = 0;</span><br><span class="line">	while (k &lt; g.n) //构造出来的边是g.n-1条 </span><br><span class="line">	&#123;</span><br><span class="line">		//找到两端点对应的连通值 </span><br><span class="line">		u1 = e[j].u;</span><br><span class="line">		v1 = e[j].v;</span><br><span class="line">		s1 = visite[u1];</span><br><span class="line">		s2 = visite[v1];</span><br><span class="line"></span><br><span class="line">		if (s1 != s2)//如果相等就是构成回路，这里是找不形成回路的顶点。 </span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; &quot;(&quot; &lt;&lt; u1 &lt;&lt; &quot;,&quot; &lt;&lt; v1 &lt;&lt; &quot;):&quot; &lt;&lt; e[j].w &lt;&lt; endl;</span><br><span class="line">			++k;</span><br><span class="line"></span><br><span class="line">			for (int i = 0; i &lt; g.n; i++) //找到s2，将其与端点s1的连通值一样，表示加入到构造集合里了 </span><br><span class="line">				if (visite[i] == s2) //找到visite[j]= s2的顶点 </span><br><span class="line">					visite[i] = s1;</span><br><span class="line">		&#125;</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	G g; //注意，这里创建的是结构体类型变量，如果是结构体指针的话，创建的矩阵就是链式 </span><br><span class="line">	int a[max][max] = &#123;</span><br><span class="line">	&#123;0,6,inf,inf,inf,1,inf&#125;,</span><br><span class="line">	&#123;6,0,4,inf,inf,inf,3&#125;,</span><br><span class="line">	&#123;inf,4,0,2,inf,inf,inf&#125;,</span><br><span class="line">	&#123;inf,inf,2,0,6,inf,5&#125;,</span><br><span class="line">	&#123;inf,inf,inf,6,0,8,7&#125;,</span><br><span class="line">	&#123;1,inf,inf,inf,8,0,inf&#125;,</span><br><span class="line">	&#123;inf,3,inf,5,7,inf,0&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	int  n = 7, e = 9;</span><br><span class="line"></span><br><span class="line">	//创建邻接矩阵 </span><br><span class="line">	create(g, a, n, e);</span><br><span class="line">	show(g);</span><br><span class="line">	kruskal(g);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    </div>

    
    
    

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/Algorithm/" rel="tag"># Algorithm</a>
              <a href="/tags/C/" rel="tag"># C++</a>
          </div>

        


        
    <div class="post-nav">
      <div class="post-nav-item">
    <a href="/2022/09/02/Algorithm_12" rel="prev" title="Algorithm--Dijkstra">
      <i class="fa fa-chevron-left"></i> Algorithm--Dijkstra
    </a></div>
      <div class="post-nav-item">
    <a href="/2022/09/02/Algorithm_1" rel="next" title="Algorithm--棋盘覆盖问题">
      Algorithm--棋盘覆盖问题 <i class="fa fa-chevron-right"></i>
    </a></div>
    </div>
      </footer>
    
  </article>
  
  
  



          </div>
          

<script>
  window.addEventListener('tabs:register', () => {
    let { activeClass } = CONFIG.comments;
    if (CONFIG.comments.storage) {
      activeClass = localStorage.getItem('comments_active') || activeClass;
    }
    if (activeClass) {
      let activeTab = document.querySelector(`a[href="#comment-${activeClass}"]`);
      if (activeTab) {
        activeTab.click();
      }
    }
  });
  if (CONFIG.comments.storage) {
    window.addEventListener('tabs:click', event => {
      if (!event.target.matches('.tabs-comment .tab-content .tab-pane')) return;
      let commentClass = event.target.classList[1];
      localStorage.setItem('comments_active', commentClass);
    });
  }
</script>

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">渗透压</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives">
          <span class="site-state-item-count">16</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">1</span>
        <span class="site-state-item-name">分类</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
        <span class="site-state-item-count">3</span>
        <span class="site-state-item-name">标签</span></a>
      </div>
  </nav>
</div>



      </div>

    </div>
  </aside>
  <div id="sidebar-dimmer"></div>


      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2022</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">渗透压</span>
</div>

        








      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/pisces.js"></script>


<script src="/js/next-boot.js"></script>




  















  

  

</body>
</html>
