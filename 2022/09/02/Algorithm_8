<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 6.2.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">


<link rel="stylesheet" href="/lib/font-awesome/css/all.min.css">

<script id="hexo-configurations">
    var NexT = window.NexT || {};
    var CONFIG = {"hostname":"venomcrt.github.io","root":"/","scheme":"Pisces","version":"7.8.0","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"copycode":{"enable":false,"show_result":false,"style":null},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"algolia":{"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"localsearch":{"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}}};
  </script>

  <meta name="description" content="12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210">
<meta property="og:type" content="article">
<meta property="og:title" content="Algorithm--哈夫曼编码">
<meta property="og:url" content="https://venomcrt.github.io/2022/09/02/Algorithm_8">
<meta property="og:site_name" content="渗透压的博客">
<meta property="og:description" content="12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210">
<meta property="og:locale" content="zh_CN">
<meta property="article:published_time" content="2022-09-02T13:42:58.000Z">
<meta property="article:modified_time" content="2022-09-23T07:01:31.527Z">
<meta property="article:author" content="渗透压">
<meta property="article:tag" content="Algorithm">
<meta property="article:tag" content="C++">
<meta name="twitter:card" content="summary">

<link rel="canonical" href="https://venomcrt.github.io/2022/09/02/Algorithm_8">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome : false,
    isPost : true,
    lang   : 'zh-CN'
  };
</script>

  <title>Algorithm--哈夫曼编码 | 渗透压的博客</title>
  






  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <span class="logo-line-before"><i></i></span>
      <h1 class="site-title">渗透压的博客</h1>
      <span class="logo-line-after"><i></i></span>
    </a>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
    </div>
  </div>
</div>




<nav class="site-nav">
  <ul id="menu" class="main-menu menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a>

  </li>
        <li class="menu-item menu-item-about">

    <a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>关于</a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>分类</a>

  </li>
  </ul>
</nav>




</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content post posts-expand">
            

    
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="https://venomcrt.github.io/2022/09/02/Algorithm_8">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="渗透压">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="渗透压的博客">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          Algorithm--哈夫曼编码
        </h1>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-calendar"></i>
              </span>
              <span class="post-meta-item-text">发表于</span>

              <time title="创建时间：2022-09-02 21:42:58" itemprop="dateCreated datePublished" datetime="2022-09-02T21:42:58+08:00">2022-09-02</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="far fa-calendar-check"></i>
                </span>
                <span class="post-meta-item-text">更新于</span>
                <time title="修改时间：2022-09-23 15:01:31" itemprop="dateModified" datetime="2022-09-23T15:01:31+08:00">2022-09-23</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-folder"></i>
              </span>
              <span class="post-meta-item-text">分类于</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%E5%AD%A6%E4%B9%A0-Code/" itemprop="url" rel="index"><span itemprop="name">学习--Code</span></a>
                </span>
            </span>

          

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
        <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct HuffmanNode &#123;</span><br><span class="line">    int weight&#123;&#125;; // 权重，出现的次数或者频率</span><br><span class="line">    char ch&#123;&#125;; // 存储符号</span><br><span class="line">    string code&#123;&#125;; // 存储该符号对应的编码</span><br><span class="line">    int leftChild&#123;&#125;, rightChild&#123;&#125;, parent&#123;&#125;; // 左、右孩子，父结点</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class HuffmanCode &#123;</span><br><span class="line">public:</span><br><span class="line">    HuffmanCode(string str); // 构造函数</span><br><span class="line">    ~HuffmanCode(); // 析构函数</span><br><span class="line">    void getMin(int&amp; first, int&amp; second, int parent); // 选取两个较小的元素</span><br><span class="line">    void Merge(int first, int second, int parent); // 合并</span><br><span class="line">    void Encode(string str); // 编码:利用哈夫曼编码原理对数据进行加密</span><br><span class="line">    void Decode(string str); // 解码</span><br><span class="line">private:</span><br><span class="line">    HuffmanNode* HuffmanTree; // 数组</span><br><span class="line">    int leafSize; // 统计不同字符的个数</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 构造函数</span><br><span class="line">HuffmanCode::HuffmanCode(string str) &#123;</span><br><span class="line">    int len = (int)str.size(); // 字符串的长度</span><br><span class="line">    int arr[256], i; // 存储字符串各个字符的个数5</span><br><span class="line">    HuffmanTree = new HuffmanNode[1000000]; // 动态分配空间****************（一定要大 因为又存储父节点 又存储子节点  目前先很大 具体到多少我再研究）</span><br><span class="line"></span><br><span class="line">    // 1.初始化HuffmanTree数组</span><br><span class="line">    for (i = 0; i &lt; (2 * len - 1); i++) &#123; // 叶子结点为len,则树最多有2*len-1个结点</span><br><span class="line">        HuffmanTree[i].leftChild = HuffmanTree[i].rightChild = HuffmanTree[i].parent = -1;</span><br><span class="line">        HuffmanTree[i].code = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    // 2.统计输入的字符串的各个字符出现的个数</span><br><span class="line">    memset(arr, 0, sizeof(arr)); // 清零</span><br><span class="line">    for (i = 0; i &lt; len; i++) // 统计次数</span><br><span class="line">        arr[str[i]]++; // str[i] -&gt; 转成对应的ASCII码，如&#x27;0&#x27;-&gt;48</span><br><span class="line">    leafSize = 0; // 出现不同字符的个数</span><br><span class="line">    for (i = 0; i &lt; 256; i++) &#123;</span><br><span class="line">        if (arr[i] != 0) &#123; // 有出现的字符</span><br><span class="line">            // cout &lt;&lt; &quot;字符:&quot; &lt;&lt; (char)i &lt;&lt; &quot;次数为：&quot; &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">            HuffmanTree[leafSize].ch = (char)i; // 将数字转成对应的字符</span><br><span class="line">            HuffmanTree[leafSize].weight = arr[i]; // 权重</span><br><span class="line">            leafSize++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 3.选取两个较小值合并</span><br><span class="line">    int first, second; // 两个较小的结点</span><br><span class="line">    for (i = leafSize; i &lt; (2 * leafSize - 1); i++) &#123; // 做leafSize-1趟</span><br><span class="line">        getMin(first, second, i); // 选取两个较小的元素</span><br><span class="line">        Merge(first, second, i); // 合并</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 析构函数</span><br><span class="line">HuffmanCode::~HuffmanCode() &#123;</span><br><span class="line">    delete[]HuffmanTree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 选取权值两个较小的元素</span><br><span class="line">void HuffmanCode::getMin(int&amp; first, int&amp; second, int parent) &#123;</span><br><span class="line">    double weight = 0;</span><br><span class="line">    int i;</span><br><span class="line"></span><br><span class="line">    // 找权重最小元素</span><br><span class="line">    for (i = 0; i &lt; parent; i++) &#123;</span><br><span class="line">        if (HuffmanTree[i].parent != -1) // 已选过，直接跳过</span><br><span class="line">            continue;</span><br><span class="line">        if (weight == 0) &#123; // 第一次找到没选过的结点</span><br><span class="line">            weight = HuffmanTree[i].weight;</span><br><span class="line">            first = i;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (HuffmanTree[i].weight &lt; weight) &#123; // 权值更小</span><br><span class="line">            weight = HuffmanTree[i].weight;</span><br><span class="line">            first = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 找权重次小元素</span><br><span class="line">    weight = 0;</span><br><span class="line">    for (i = 0; i &lt; parent; i++) &#123;</span><br><span class="line">        if (HuffmanTree[i].parent != -1 || i == first) // 已选过，直接跳过</span><br><span class="line">            continue;</span><br><span class="line">        if (weight == 0) &#123; // 第一次找到没选过的结点</span><br><span class="line">            weight = HuffmanTree[i].weight;</span><br><span class="line">            second = i;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (HuffmanTree[i].weight &lt; weight) &#123; // 权值更小</span><br><span class="line">            weight = HuffmanTree[i].weight;</span><br><span class="line">            second = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 合并</span><br><span class="line">void HuffmanCode::Merge(int first, int second, int parent) &#123;</span><br><span class="line">    HuffmanTree[first].parent = HuffmanTree[second].parent = parent; // 父结点</span><br><span class="line">    HuffmanTree[parent].leftChild = first; // 左孩子</span><br><span class="line">    HuffmanTree[parent].rightChild = second; // 右孩子</span><br><span class="line">    HuffmanTree[parent].weight = HuffmanTree[first].weight + HuffmanTree[second].weight; // 权值</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 编码:利用哈夫曼编码原理对数据进行加密</span><br><span class="line">void HuffmanCode::Encode(string str) &#123;</span><br><span class="line">    string code; // 存储符号的不定长二进制编码</span><br><span class="line">    int i, j, k, parent;</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; leafSize; i++) &#123; // 从叶子结点出发</span><br><span class="line">        j = i;</span><br><span class="line">        code = &quot;&quot;; // 初始化为空</span><br><span class="line">        while (HuffmanTree[j].parent != -1) &#123; // 往上找到根结点</span><br><span class="line">            parent = HuffmanTree[j].parent; // 父结点</span><br><span class="line">            if (j == HuffmanTree[parent].leftChild) // 如果是左孩子，则记为0</span><br><span class="line">                code += &quot;0&quot;;</span><br><span class="line">            else // 右孩子，记为1</span><br><span class="line">                code += &quot;1&quot;;</span><br><span class="line">            j = parent; // 上移到父结点</span><br><span class="line">        &#125;</span><br><span class="line">        // 编码要倒过来：因为是从叶子往上走到根，而编码是要从根走到叶子结点</span><br><span class="line">        for (k = (int)code.size() - 1; k &gt;= 0; k--)</span><br><span class="line">            HuffmanTree[i].code += code[k]; // 保存编码</span><br><span class="line">        cout &lt;&lt; &quot;字符：&quot; &lt;&lt; HuffmanTree[i].ch &lt;&lt; &quot;的编码为：&quot; &lt;&lt; HuffmanTree[i].code &lt;&lt; &quot; &quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;您输入的字符串哈夫曼编码为:&quot; &lt;&lt; endl;</span><br><span class="line">    for (int i = 0; i &lt; str.length(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int j = 0; j &lt; leafSize; j++) &#123;</span><br><span class="line">            if (str[i] == HuffmanTree[j].ch) &#123;</span><br><span class="line">                cout &lt;&lt; HuffmanTree[j].code;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 解码</span><br><span class="line">void HuffmanCode::Decode(string str) &#123;</span><br><span class="line">    string decode, temp; // decode保存整个解码, temp保存每一个解码</span><br><span class="line">    int len = (int)str.size(); // 编码的长度</span><br><span class="line">    int i, j;</span><br><span class="line"></span><br><span class="line">    decode = temp = &quot;&quot;; // 初始化为空</span><br><span class="line">    for (i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        temp += str[i]; // 加一个编码</span><br><span class="line">        for (j = 0; j &lt; leafSize; j++) &#123;</span><br><span class="line">            if (HuffmanTree[j].code == temp) &#123; // 在叶子结点中找到对应的编码</span><br><span class="line">                decode += HuffmanTree[j].ch; // 转成对应的字符</span><br><span class="line">                temp = &quot;&quot;;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (i == len - 1 &amp;&amp; j == leafSize) &#123; // 遍历完都没找到对应的编码</span><br><span class="line">            cout &lt;&lt; &quot;解码出错！&quot; &lt;&lt; endl;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; decode &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc, const char* argv[]) &#123;</span><br><span class="line">    string str;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; &quot;请输入字符串进行编码：&quot; &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; str; // 输入要加密的字符串</span><br><span class="line">    HuffmanCode st(str); // 对象</span><br><span class="line">    cout &lt;&lt; &quot;对字符串编码情况如下：&quot; &lt;&lt; endl;</span><br><span class="line">    st.Encode(str); // 编码</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;请输入要解码的二进制编码:&quot; &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    cout &lt;&lt; &quot;解码如下：&quot; &lt;&lt; endl;</span><br><span class="line">    st.Decode(str); // 解码</span><br><span class="line">    return 0;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>

    
    
    

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/Algorithm/" rel="tag"># Algorithm</a>
              <a href="/tags/C/" rel="tag"># C++</a>
          </div>

        


        
    <div class="post-nav">
      <div class="post-nav-item">
    <a href="/2022/09/02/Algorithm_7" rel="prev" title="Algorithm--0-1背包问题">
      <i class="fa fa-chevron-left"></i> Algorithm--0-1背包问题
    </a></div>
      <div class="post-nav-item">
    <a href="/2022/09/02/Algorithm_5" rel="next" title="Algorithm--归并排序">
      Algorithm--归并排序 <i class="fa fa-chevron-right"></i>
    </a></div>
    </div>
      </footer>
    
  </article>
  
  
  



          </div>
          

<script>
  window.addEventListener('tabs:register', () => {
    let { activeClass } = CONFIG.comments;
    if (CONFIG.comments.storage) {
      activeClass = localStorage.getItem('comments_active') || activeClass;
    }
    if (activeClass) {
      let activeTab = document.querySelector(`a[href="#comment-${activeClass}"]`);
      if (activeTab) {
        activeTab.click();
      }
    }
  });
  if (CONFIG.comments.storage) {
    window.addEventListener('tabs:click', event => {
      if (!event.target.matches('.tabs-comment .tab-content .tab-pane')) return;
      let commentClass = event.target.classList[1];
      localStorage.setItem('comments_active', commentClass);
    });
  }
</script>

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">渗透压</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives">
          <span class="site-state-item-count">9</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">1</span>
        <span class="site-state-item-name">分类</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
        <span class="site-state-item-count">3</span>
        <span class="site-state-item-name">标签</span></a>
      </div>
  </nav>
</div>



      </div>

    </div>
  </aside>
  <div id="sidebar-dimmer"></div>


      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2022</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">渗透压</span>
</div>

        








      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/pisces.js"></script>


<script src="/js/next-boot.js"></script>




  















  

  

</body>
</html>
